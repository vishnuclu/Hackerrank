def find_paths(adj, start, end, path=[]):
    path=path+[start]
    if start == end:
        return [path]
    if not adj.has_key(start):
        return []
    paths = []
    for node in adj[start]:
        if node not in path:
            newpaths = find_paths(adj, node, end, path)
            for newpath in newpaths:
                paths.append(newpath)
    return paths
        
    
n,m,k = map(int,raw_input().split())
fish = {}
for i in range(n):
    fish[i] = map(int,raw_input().split())[1:]
edge = []
Adj = {}
node = [i+1 for i in range(n)]
for j in range(n):
    Adj[j+1] = []

for i in range(m):
    u,v,t = map(int,raw_input().split())
    edge.append((u, v, t))
    Adj[u].append(v)
    Adj[v].append(u)
paths = find_paths(Adj,1,n)
for path in paths:
    for node in path:
        
